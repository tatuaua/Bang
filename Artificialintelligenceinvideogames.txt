



Artificial intelligence in video games - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload file



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
Overview








2
History








3
Views








4
Usage




Toggle Usage subsection





4.1
In computer simulations of board games








4.2
In modern video games






4.2.1
Video game combat AI










4.3
Procedural content generation






4.3.1
Procedurally generated levels








4.3.2
Procedurally generated music and sound










4.4
Monte Carlo tree search method








4.5
Uses in games beyond NPCs










5
Non-player characters (NPCs)




Toggle Non-player characters (NPCs) subsection





5.1
Narratives and gameplay roles








5.2
Advancements in NPC artificial intelligence








5.3
Challenges in NPC development










6
Cheating AI








7
Examples








8
Generative artificial intelligence in video games








9
Advancements in AI








10
See also








11
References








12
Bibliography








13
External links


















Toggle the table of contents







Artificial intelligence in video games



22 languages




العربيةAzərbaycancaCatalàČeštinaEspañolفارسیFrançais한국어Հայերենქართული日本語РусскийSlovenščinaکوردیСрпски / srpskiSuomiไทยTürkçeУкраїнськаاردو粵語中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia


AI used for video games, usually non-player characters


Part of a series on theVideo game industry
Development
Producer
Developer
Designer
Artist
Programmer

Design
Level design
Programming
Engine
AI
Creation system
Graphics
Music
Testing

Products
Video game
Specialized / alternative-paradigmatic types: Casual
Erotic
Indie
Interactive movie
Nonviolent
Serious
Art game
Edugame
Exergame
Non-game

Arcade cabinet
Console
Accessory

Publishing
Markets
China
U.S.
Japan
South Korea

Localization
Censorship
Content rating

Piracy
Clone
Intellectual property protection
Digital rights management
Copy protection


Distribution and monetization
Buy-to-play
AAA game
Expansion pack
Episodic video game
Early access
Crowdfunding
Downloadable content

Games as a service
Cloud gaming

Free-to-play
Microtransactions
In-game currency
Loot box
gacha
Season pass
Battle pass

Advertising in video games
in-game
Advergame

Related
Game studies
Game journalism

Lists
List of video game developers
Indie
List of video game publishers
List of video game industry people
List of video game websites
List of video game magazines
vte
In video games, artificial intelligence (AI) is used to generate responsive, adaptive or intelligent behaviors primarily in non-playable characters (NPCs) similar to human-like intelligence. Artificial intelligence has been an integral part of video games since their inception in 1948, first seen in the game Nim.[1] AI in video games is a distinct subfield and differs from academic AI. It serves to improve the game-player experience rather than machine learning or decision making. During the golden age of arcade video games the idea of AI opponents was largely popularized in the form of graduated difficulty levels, distinct movement patterns, and in-game events dependent on the player's input. Modern games often implement existing techniques such as pathfinding and decision trees to guide the actions of NPCs. AI is often used in mechanisms which are not immediately visible to the user, such as data mining and procedural-content generation.[2] One of the most infamous examples of this NPC technology and gradual difficulty levels can be found in the game Mike Tyson's Punch-Out!! (1987).[3]
In general, game AI does not, as might be thought and sometimes is depicted to be the case, mean a realization of an artificial person corresponding to an NPC in the manner of the Turing test or an artificial general intelligence.


Overview[edit]
The term game AI is used to refer to a broad set of algorithms that also include techniques from control theory, robotics, computer graphics and computer science in general, and so video game AI may often not constitute "true AI" in that such techniques do not necessarily facilitate computer learning or other standard criteria, only constituting "automated computation" or a predetermined and limited set of responses to a predetermined and limited set of inputs.[4][5][6]
Many industries and corporate voices[who?] argue that game AI has come a long way in the sense that it has revolutionized the way humans interact with all forms of technology, although many[who?] expert researchers are skeptical of such claims, and particularly of the notion that such technologies fit the definition of "intelligence" standardly used in the cognitive sciences.[4][5][6][7] Industry voices[who?] make the argument that AI has become more versatile in the way we use all technological devices for more than their intended purpose because the AI allows the technology to operate in multiple ways, allegedly developing their own personalities and carrying out complex instructions of the user.[8][9]
People[who?] in the field of AI have argued that video game AI is not true intelligence, but an advertising buzzword used to describe computer programs that use simple sorting and matching algorithms to create the illusion of intelligent behavior while bestowing software with a misleading aura of scientific or technological complexity and advancement.[4][5][6][10] Since game AI for NPCs is centered on appearance of intelligence and good gameplay within environment restrictions, its approach is very different from that of traditional AI.

History[edit]
Game playing was an area of research in AI from its inception. One of the first examples of AI is the computerized game of Nim made in 1951 and published in 1952. Despite being advanced technology in the year it was made, 20 years before Pong, the game took the form of a relatively small box and was able to regularly win games even against highly skilled players of the game.[1] In 1951, using the Ferranti Mark 1 machine of the University of Manchester, Christopher Strachey wrote a checkers program and Dietrich Prinz wrote one for chess.[11] These were among the first computer programs ever written. Arthur Samuel's checkers program, developed in the middle 1950s and early 1960s, eventually achieved sufficient skill to challenge a respectable amateur.[12] Work on checkers and chess would culminate in the defeat of Garry Kasparov by IBM's Deep Blue computer in 1997.[13] The first video games developed in the 1960s and early 1970s, like Spacewar!, Pong, and Gotcha (1973), were games implemented on discrete logic and strictly based on the competition of two players, without AI.
Games that featured a single player mode with enemies started appearing in the 1970s.  The first notable ones for the arcade appeared in 1974: the Taito game Speed Race (racing video game) and the Atari games Qwak (duck hunting light gun shooter) and Pursuit (fighter aircraft dogfighting simulator).  Two text-based computer games, Star Trek (1971) and Hunt the Wumpus (1973), also had enemies.  Enemy movement was based on stored patterns. The incorporation of microprocessors would allow more computation and random elements overlaid into movement patterns.

Light cycle characters compete to be the last one riding, in GLtron.
It was during the golden age of video arcade games that the idea of AI opponents was largely popularized, due to the success of Space Invaders (1978), which sported an increasing difficulty level, distinct movement patterns, and in-game events dependent on hash functions based on the player's input. Galaxian (1979) added more complex and varied enemy movements, including maneuvers by individual enemies who break out of formation. Pac-Man (1980) introduced AI patterns to maze games, with the added quirk of different personalities for each enemy. Karate Champ (1984) later introduced AI patterns to fighting games. First Queen (1988) was a tactical action RPG which featured characters that can be controlled by the computer's AI in following the leader.[14][15] The role-playing video game Dragon Quest IV (1990) introduced a "Tactics" system, where the user can adjust the AI routines of non-player characters during battle, a concept later introduced to the action role-playing game genre by Secret of Mana (1993).
Games like Madden Football, Earl Weaver Baseball and Tony La Russa Baseball all based their AI in an attempt to duplicate on the computer the coaching or managerial style of the selected celebrity.  Madden, Weaver and La Russa all did extensive work with these game development teams to maximize the accuracy of the games.[citation needed]  Later sports titles allowed users to "tune" variables in the AI to produce a player-defined managerial or coaching strategy.
The emergence of new game genres in the 1990s prompted the use of formal AI tools like finite-state machines. Real-time strategy games taxed the AI with many objects, incomplete information, pathfinding problems, real-time decisions and economic planning, among other things.[16] The first games of the genre had notorious problems. Herzog Zwei (1989), for example, had almost broken pathfinding and very basic three-state state machines for unit control, and Dune II (1992) attacked the players' base in a beeline and used numerous cheats.[17] Later games in the genre exhibited more sophisticated AI.
Later games have used bottom-up AI methods, such as the emergent behaviour and evaluation of player actions in games like Creatures or Black & White. Façade (interactive story) was released in 2005 and used interactive multiple way dialogs and AI as the main aspect of game.

A robot goes for the ball and competes in Robocup.
Games have provided an environment for developing artificial intelligence with potential applications beyond gameplay. Examples include Watson, a Jeopardy!-playing computer; and the RoboCup tournament, where robots are trained to compete in soccer.[18]

Views[edit]
Many experts[who?] complain that the "AI" in the term game AI overstates its worth, as game AI is not about intelligence, and shares few of the objectives of the academic field of AI. Whereas "real AI" addresses fields of machine learning, decision making based on arbitrary data input, and even the ultimate goal of strong AI that can reason, "game AI" often consists of a half-dozen rules of thumb, or heuristics, that are just enough to give a good gameplay experience.[citation needed] Historically, academic game-AI projects have been relatively separate from commercial products because the academic approaches tended to be simple and non-scalable. Commercial game AI has developed its own set of tools, which have been sufficient to give good performance in many cases.[2]
Game developers' increasing awareness of academic AI and a growing interest in computer games by the academic community is causing the definition of what counts as AI in a game to become less idiosyncratic.  Nevertheless, significant differences between different application domains of AI mean that game AI can still be viewed as a distinct subfield of AI.  In particular, the ability to legitimately solve some AI problems in games by cheating creates an important distinction. For example, inferring the position of an unseen object from past observations can be a difficult problem when AI is applied to robotics, but in a computer game a NPC can simply look up the position in the game's scene graph.  Such cheating can lead to unrealistic behavior and so is not always desirable.  But its possibility serves to distinguish game AI and leads to new problems to solve, such as when and how to cheat.[citation needed]
The major limitation to strong AI is the inherent depth of thinking and the extreme complexity of the decision-making process. This means that although it would be then theoretically possible to make "smart" AI the problem would take considerable processing power.[citation needed]

Usage[edit]
In computer simulations of board games[edit]
Computer chess
Computer shogi
Computer Go
Computer checkers
Computer Othello
Computer poker players
Akinator
Computer Arimaa
Logistello, which plays Reversi
Rog-O-Matic, which plays Rogue
Computer players of Scrabble
A variety of board games in the Computer Olympiad
General game playing
Solved games have a computer strategy which is guaranteed to be optimal, and in some cases force a win or draw.
In modern video games[edit]
Further information: Video game bot
Game AI/heuristic algorithms are used in a wide variety of quite disparate fields inside a game.  The most obvious is in the control of any NPCs in the game, although "scripting" (decision tree) is currently the most common means of control.[19] These handwritten decision trees often result in "artificial stupidity" such as repetitive behavior, loss of immersion, or abnormal behavior in situations the developers did not plan for.[20]
Pathfinding, another common use for AI, is widely seen in real-time strategy games. Pathfinding is the method for determining how to get a NPC from one point on a map to another, taking into consideration the terrain, obstacles and possibly "fog of war".[21][22] Commercial videogames often use fast and simple "grid-based pathfinding", wherein the terrain is mapped onto a rigid grid of uniform squares and a pathfinding algorithm such as A* or IDA* is applied to the grid.[23][24][25] Instead of just a rigid grid, some games use irregular polygons and assemble a navigation mesh out of the areas of the map that NPCs can walk to.[23][26] As a third method, it is sometimes convenient for developers to manually select "waypoints" that NPCs should use to navigate; the cost is that such waypoints can create unnatural-looking movement. In addition, waypoints tend to perform worse than navigation meshes in complex environments.[27][28] Beyond static pathfinding, navigation is a sub-field of Game AI focusing on giving NPCs the capability to navigate in a dynamic environment, finding a path to a target while avoiding collisions with other entities (other NPC, players...) or collaborating with them (group navigation).[citation needed] Navigation in dynamic strategy games with large numbers of units, such as Age of Empires (1997) or Civilization V (2010), often performs poorly; units often get in the way of other units.[28]
Rather than improve the Game AI to properly solve a difficult problem in the virtual environment, it is often more cost-effective to just modify the scenario to be more tractable. If pathfinding gets bogged down over a specific obstacle, a developer may just end up moving or deleting the obstacle.[29] In Half-Life (1998), the pathfinding algorithm sometimes failed to find a reasonable way for all the NPCs to evade a thrown grenade; rather than allow the NPCs to attempt to bumble out of the way and risk appearing stupid, the developers instead scripted the NPCs to crouch down and cover in place in that situation.[30]

Video game combat AI[edit]
Many contemporary video games fall under the category of action, first-person shooter, or adventure. In most of these types of games, there is some level of combat that takes place. The AI's ability to be efficient in combat is important in these genres. A common goal today is to make the AI more human or at least appear so.
One of the more positive and efficient features found in modern-day video game AI is the ability to hunt. AI originally reacted in a very black and white manner. If the player were in a specific area then the AI would react in either a complete offensive manner or be entirely defensive. In recent years, the idea of "hunting" has been introduced; in this 'hunting' state the AI will look for realistic markers, such as sounds made by the character or footprints they may have left behind.[31] These developments ultimately allow for a more complex form of play. With this feature, the player can actually consider how to approach or avoid an enemy. This is a feature that is particularly prevalent in the stealth genre.
Another development in recent game AI has been the development of "survival instinct". In-game computers can recognize different objects in an environment and determine whether it is beneficial or detrimental to its survival. Like a user, the AI can look for cover in a firefight before taking actions that would leave it otherwise vulnerable, such as reloading a weapon or throwing a grenade. There can be set markers that tell it when to react in a certain way. For example, if the AI is given a command to check its health throughout a game then further commands can be set so that it reacts a specific way at a certain percentage of health. If the health is below a certain threshold then the AI can be set to run away from the player and avoid it until another function is triggered. Another example could be if the AI notices it is out of bullets, it will find a cover object and hide behind it until it has reloaded. Actions like these make the AI seem more human. However, there is still a need for improvement in this area.
Another side-effect of combat AI occurs when two AI-controlled characters encounter each other; first popularized in the id Software game Doom, so-called 'monster infighting' can break out in certain situations.  Specifically, AI agents that are programmed to respond to hostile attacks will sometimes attack each other if their cohort's attacks land too close to them.[citation needed] In the case of Doom, published gameplay manuals even suggest taking advantage of monster infighting in order to survive certain levels and difficulty settings.

Procedural content generation[edit]
Procedural content generation (PCG) is an AI technique to autonomously create ingame content through algorithms with minimal input from designers.[32] PCG is typically used to dynamically generate game features such as levels, NPC dialogue, and sounds. Developers input specific parameters to guide the algorithms into making content for them. PCG offers numerous advantages from both a developmental and player experience standpoint. Game studios are able to spend less money on artists and save time on production.[33] Players are given a fresh, highly replayable experience as the game generates new content each time they play. PCG allows game content to adapt in real time to the player's actions.[34]

Procedurally generated levels[edit]
Generative algorithms (a rudimentary form of AI) have been used for level creation for decades. The iconic 1980 dungeon crawler computer game Rogue is a foundational example. Players are tasked with descending through the increasingly difficult levels of a dungeon to retrieve the Amulet of Yendor. The dungeon levels are algorithmically generated at the start of each game. The save file is deleted every time the player dies.[35] The algorithmic dungeon generation creates unique gameplay that would not otherwise be there as the goal of retrieving the amulet is the same each time.
Opinions on total level generation as seen in games like Rogue can vary. Some developers can be skeptical of the quality of generated content and desire to create a world with a more "human" feel so they will use PCG more sparingly.[32] Consequently, they will only use PCG to generate specific components of an otherwise handcrafted level. A notable example of this is Ubisoft's 2017 tactical shooter Tom Clancy's Ghost Recon Wildlands. Developers used a pathfinding algorithm trained with a data set of real maps to create road networks that would weave through handcrafted villages within the game world.[34] This is an intelligent use of PCG as the AI would have a large amount of real world data to work with and roads are straightforward to create. However, the AI would likely miss nuances and subtleties if it was tasked with creating a village where people live.
As AI has become more advanced, developer goals are shifting to create massive repositories of levels from data sets. In 2023, researchers from New York University and the University of the Witwatersrand trained a large language model to generate levels in the style of the 1981 puzzle game Sokoban. They found that the model excelled at generating levels with specifically requested characteristics such as difficulty level or layout.[32] However, current models such as the one used in the study require large datasets of levels to be effective. They concluded that, while promising, the high data cost of large language models currently outweighs the benefits for this application.[32] Continued advancements in the field will likely lead to more mainstream use in the future.

Procedurally generated music and sound[edit]
The musical score of a video game is an important expression of the emotional tone of a scene to the player. Sound effects such as the noise of a weapon hitting an enemy help indicate the effect of the player's actions. Generating these in real time creates an engaging experience for the player because the game is more responsive to their input.[32] An example is the 2013 adventure game Proteus where an algorithm dynamically adapts the music based on the angle the player is viewing the ingame landscape from.[35]
Recent breakthroughs in AI have resulted in the creation of advanced tools that are capable of creating music and sound based on evolving factors with minimal developer input. One such example is the MetaComposure music generator. MetaComposure is an evolutionary algorithm designed to generate original music compositions during real time gameplay to match the current mood of the environment.[36] The algorithm is able to assess the current mood of the game state through "mood tagging". Research indicates that there is a significant positive statistical correlation regarding player rated game engagement and the dynamically generated musical compositions when they accurately match their current emotions.[37]

Monte Carlo tree search method[edit]
Game AI often amounts to pathfinding and finite-state machines. Pathfinding gets the AI from point A to point B, usually in the most direct way possible. State machines permit transitioning between different behaviors. The Monte Carlo tree search method[38] provides a more engaging game experience by creating additional obstacles for the player to overcome. The MCTS consists of a tree diagram in which the AI essentially plays tic-tac-toe. Depending on the outcome, it selects a pathway yielding the next obstacle for the player. In complex video games, these trees may have more branches, provided that the player can come up with several strategies to surpass the obstacle.

Uses in games beyond NPCs[edit]
Academic AI may play a role within game AI, outside the traditional concern of controlling NPC behavior. Georgios N. Yannakakis highlighted four potential application areas:[2]

Player-experience modeling: Discerning the ability and emotional state of the player, so as to tailor the game appropriately. This can include dynamic game difficulty balancing, which consists in adjusting the difficulty in a video game in real-time based on the player's ability. Game AI may also help deduce player intent (such as gesture recognition).
Procedural-content generation: Creating elements of the game environment like environmental conditions, levels, and even music in an automated way. AI methods can generate new content or interactive stories.
Data mining on user behavior: This allows game designers to explore how people use the game, what parts they play most, and what causes them to stop playing, allowing developers to tune gameplay or improve monetization.
Alternate approaches to NPCs: These include changing the game set-up to enhance NPC believability and exploring social rather than individual NPC behavior.
Rather than procedural generation, some researchers have used generative adversarial networks (GANs) to create new content. In 2018 researchers at Cornwall University trained a GAN on a thousand human-created levels for Doom; following training, the neural net prototype was able to design new playable levels on its own. Similarly, researchers at the University of California prototyped a GAN to generate levels for Super Mario.[39] In 2020 Nvidia displayed a GAN-created clone of Pac-Man; the GAN learned how to recreate the game by watching 50,000 (mostly bot-generated) playthroughs.[40]

Non-player characters (NPCs)[edit]
Non-player characters are entities within video games that are not controlled by players, but instead are managed by AI systems. NPCs contribute to the immersion, storytelling, and the mechanics of a game. They often serve as companions, quest-givers, merchants and much more. Their realism has advanced significantly in the past few years, thanks to improvements in AI technologies.

Narratives and gameplay roles[edit]
NPCs are essential in both narrative-driven as well as open-world games. They help convey the lore and context of the game, making them pivotal to world-building and narrative progression. For instance, an NPC can provide critical information, offer quests, or simply populate the world to add a sense of realism to the game. Additionally, their role as quest-givers or merchants makes them integral to the gameplay loop, giving players access to resources, missions, or services that enable further progression.
Additionally, NPCs can be designed to serve functional roles in games, such as a merchant or to provide a service to the player. These characters are central to facilitating game mechanics by acting as intermediaries between the player and in-game systems. Academics [who?] say the interactions between players and NPCs are often designed to be straightforward but contextually relevant, ensuring that the player receives necessary feedback or resources for gameplay continuity.

Advancements in NPC artificial intelligence[edit]
Recent advancements[as of?] in artificial intelligence have significantly enhanced the complexity and realism of NPCs. Before these advancements, AI operated on pre-programmed behaviors, making them predictable and repeatable. With AI developing NPCs have become more adaptive and able to dynamically respond to players. Experts[who?] think the integration of deep learning and reinforcement learning techniques has enabled NPCs to adjust their behavior in response to player actions, creating a more interactive and personalized gameplay experience.
One such development is the use of adaptive behavior models. These allow NPCs to analyze and learn from players decisions in real time. This behavior allows for a much more engaging experience. For example as said by experts in the field, [who?] NPCs in modern video games can now react to player actions with increased sophistication, such as adjusting their tactics in combat or changing their dialogue based on past interactions. By using deep learning algorithms these systems emulate human-like decisions-making, thus making NPCs feel more like real people rather than static game elements.
Another advancements in NPC AI is the use of natural language processing, which allows NPCs to engage in more realistic conversations with players. Before this NPC dialogue was limited to a fixed set of responses. It is said [by whom?] that NLP has improved the fluidity of NPC conversations, allowing them to respond more contextually to player inputs. This development has increased the depth and immersion of player-NPC interactions, as players can now engage in more complex dialogues that affect the storyline and gameplay outcomes.
Additionally, deep learning models have allowed NPCs to become more capable of predicting players behaviors. Deep learning allows NPCs to process large amounts of data and adapt to player strategies, making interactions with them less predictable and more varied. This creates a more immersive experience, as NPCs are now able to "learn" from player behavior, which provides a greater sense of realism within the game.

Challenges in NPC development[edit]
Despite all of these advancements in NPC AI, there are still significant challenges that developers face in designing NPCs. They need to balance realism, functionally, and players expectations. The key challenge is to make sure that NPCs enhance the players experience, rather than disturb the gameplay. Overly realistic NPCs that behave unpredictably can frustrate players by hindering progression or breaking immersion. Conversely, NPCs that are too predictable or simplistic may fail to engage players, reducing the overall effectiveness of the game's narrative and mechanics.
Another factor that needs to be accounted for is the computation cost of implementing advanced AI for NPCs. The use of these Advanced AI techniques requires large amount of processing power, which can limit its usage. Balancing the performance of AI-driven NPCs with the game's overall technical limitations is crucial for ensuring smooth gameplay. Experts [who?] mentioned how developers must allocate resources efficiently to avoid overburdening the game’s systems, particularly in large, open-world games where numerous NPCs must interact with the player simultaneously. 
Finally, creating NPCs that can respond dynamically to a wide range of player behaviors remains a difficult task. NPCs must be able to handle both scripted interactions and unscripted scenarios where players may behave in unexpected ways. Designing NPCs capable of adapting to such variability requires complex AI models that can account for numerous possible interactions, which can be resource-intensive and time-consuming for developers.

Cheating AI[edit]
Gamers always ask if the AI cheats (presumably so they can complain if they lose)— Terry Lee Coleman of Computer Gaming World, 1994[41]
In the context of artificial intelligence in video games, cheating refers to the programmer giving agents actions and access to information that would be unavailable to the player in the same situation.[42] Believing that the Atari 8-bit could not compete against a human player, Chris Crawford did not fix a bug in Eastern Front (1941) that benefited the computer-controlled Russian side.[43] Computer Gaming World in 1994 reported that "It is a well-known fact that many AIs 'cheat' (or, at least, 'fudge') in order to be able to keep up with human players".[44]
For example, if the agents want to know if the player is nearby they can either be given complex, human-like sensors (seeing, hearing, etc.), or they can cheat by simply asking the game engine for the player's position. Common variations include giving AIs higher speeds in racing games to catch up to the player or spawning them in advantageous positions in first-person shooters. The use of cheating in AI shows the limitations of the "intelligence" achievable artificially; generally speaking, in games where strategic creativity is important, humans could easily beat the AI after a minimum of trial and error if it were not for this advantage. Cheating is often implemented for performance reasons where in many cases it may be considered acceptable as long as the effect is not obvious to the player. While cheating refers only to privileges given specifically to the AI—it does not include the inhuman swiftness and precision natural to a computer—a player might call the computer's inherent advantages "cheating" if they result in the agent acting unlike a human player.[42] Sid Meier stated that he omitted multiplayer alliances in Civilization because he found that the computer was almost as good as humans in using them, which caused players to think that the computer was cheating.[45] Developers say that most game AIs are honest but they dislike players erroneously complaining about "cheating" AI. In addition, humans use tactics against computers that they would not against other people.[43]

Examples[edit]
In the 1996 game Creatures, the user "hatches" small furry animals and teaches them how to behave. These "Norns" can talk, feed themselves, and protect themselves against vicious creatures. It was the first popular application of machine learning in an interactive simulation. Neural networks are used by the creatures to learn what to do. The game is regarded as a breakthrough in artificial life research, which aims to model the behavior of creatures interacting with their environment.[46]
In the 2001 first-person shooter Halo: Combat Evolved the player assumes the role of the Master Chief, battling various aliens on foot or in vehicles. Enemies use cover very wisely, and employ suppressing fire and grenades. The squad situation affects the individuals, so certain enemies flee when their leader dies. Attention is paid to the little details, with enemies notably throwing back grenades or team-members responding to being bothered. The underlying "behavior tree" technology has become very popular in the games industry since Halo 2.[46]
The 2005 psychological horror first-person shooter F.E.A.R. has player characters engage a battalion of cloned super-soldiers, robots and paranormal creatures. The AI uses a planner to generate context-sensitive behaviors, the first time in a mainstream game. This technology is still used as a reference for many studios. The Replicas are capable of utilizing the game environment to their advantage, such as overturning tables and shelves to create cover, opening doors, crashing through windows, or even noticing (and alerting the rest of their comrades to) the player's flashlight. In addition, the AI is also capable of performing flanking maneuvers, using suppressing fire, throwing grenades to flush the player out of cover, and even playing dead. Most of these actions, in particular the flanking, is the result of emergent behavior.[47][48]
The survival horror series S.T.A.L.K.E.R. (2007–) confronts the player with man-made experiments, military soldiers, and mercenaries known as Stalkers. The various encountered enemies (if the difficulty level is set to its highest) use combat tactics and behaviors such as healing wounded allies, giving orders, out-flanking the player and using weapons with pinpoint accuracy.[citation needed]
The 2010 real-time strategy game StarCraft II: Wings of Liberty gives the player control of one of three factions in a 1v1, 2v2, or 3v3 battle arena. The player must defeat their opponents by destroying all their units and bases. This is accomplished by creating units that are effective at countering opponents' units. Players can play against multiple different levels of AI difficulty ranging from very easy to Cheater 3 (insane). The AI is able to cheat at the difficulty Cheater 1 (vision), where it can see units and bases when a player in the same situation could not. Cheater 2 gives the AI extra resources, while Cheater 3 gives an extensive advantage over its opponent.[49]
Red Dead Redemption 2, released by Rockstar Games in 2018, exemplifies the advanced use of AI in modern video games. The game incorporates a highly detailed AI system that governs the behavior of NPCs and the dynamic game world. NPCs in the game display complex and varied behaviors based on a wide range of factors including their environment, player interactions, and time of day. This level of AI integration creates a rich, immersive experience where characters react to players in a realistic manner, contributing to the game's reputation as one of the most advanced open-world games ever created.[50]
The 2024 browser-based sandbox game Infinite Craft uses generative AI software, including LLaMA. When two elements are being combined, a new element is generated by the AI.[51]
The 2024 browser-based game Oasis uses generative AI to simulate the video game Minecraft. Oasis is trained on millions of hours of footage from Minecraft, and predicts how the next frame of gameplay looks using this dataset. Oasis does not have object permanence because it does not store any data.[52]

Generative artificial intelligence in video games[edit]
Generative artificial intelligence, AI system that can response to prompts and produce text, images, and audio and video clips, arose in 2023 with systems like ChatGPT and Stable Diffusion. In video games, these systems could create the potential for game assets to be created indefinitely, bypassing typical limitations on human creations. However, there are similar concerns in other fields particularly the potential for loss of jobs normally dedicated to the creation of these assets.[53]
In January 2024, SAG-AFTRA, a United States union representing actors, signed a contract with Replica Studios that would allow Replica to capture the voicework of union actors for creating AI voice systems based on their voices for use in video games, with the contract assuring pay and rights protections. While the contract was agreed upon by a SAG-AFTRA committee, many members expressed criticism of the move, having not been told of it until it was completed and that the deal did not do enough to protect the actors.[54]

Advancements in AI[edit]
Recent advancements in AI for video games have led to more complex and adaptive behaviors in non-playable characters (NPCs). For instance, AI systems now utilize sophisticated techniques such as decision trees and state machines to enhance NPC interactions and realism, as discussed in "Artificial Intelligence in Games".[55] Recent advancements in AI for video games have also focused on improving dynamic and adaptive behaviors in NPCs. For example, recent research has explored the use of complex neural networks to enable NPCs to learn and adapt their behavior based on player actions, enhancing the overall gaming experience. This approach is detailed in the IEEE paper on "AI Techniques for Interactive Game Systems".[56]

See also[edit]

Video games portal
Applications of artificial intelligence
Behavior selection algorithm – Algorithm that selects actions for intelligent agents
Machine learning in video games – Overview of the use of machine learning in several video games
Video game bot – Type of artificial intelligence–based expert system software
Simulated reality – Concept of a false version of reality
Utility system – robust technique for decision making in video games
Kynapse – game AI middleware, specializing in path finding and spatial reasoning
AiLive – suite of game AI middleware
Artificial intelligence in architecture
xaitment – graphical game AI software
Lists
List of emerging technologies
List of game AI middleware
Outline of artificial intelligence
References[edit]


^ a b Redheffer, Raymond (1948). "A Machine for Playing the Game Nim". The American Mathematical Monthly. 55 (6): 343–349. doi:10.1080/00029890.1948.11999249. ISSN 0002-9890.

^ a b c Yannakakis, Geogios N (2012). "Game AI revisited". Proceedings of the 9th conference on Computing Frontiers (PDF). pp. 285–292. doi:10.1145/2212908.2212954. ISBN 9781450312158. S2CID 4335529. Archived (PDF) from the original on 8 August 2014.

^ "Punch-Out!! (NES)", Wikipedia, 28 July 2024, retrieved 31 July 2024

^ a b c Bogost, Ian (March 2017). ""Artificial Intelligence" Has Become Meaningless". Retrieved 22 July 2017.

^ a b c Kaplan, Jerry (March 2017). "AI's PR Problem". MIT Technology Review.

^ a b c Eaton, Eric; Dietterich, Tom; Gini, Maria (December 2015). "Who Speaks for AI?". AI Matters. 2 (2): 4–14. doi:10.1145/2847557.2847559. S2CID 207233310.

^ "How artificial intelligence will revolutionize the way video games are developed and played". The Verge. 6 March 2019.

^ Eastwood, Gary. "How video game AI is changing the world". CIO. Archived from the original on 28 February 2017. Retrieved 28 February 2017.

^ "Why gaming AI won't help make AI work in the real world—but could". 30 August 2018.

^ "Why video games and board games aren't a good measure of AI intelligence". 19 December 2019.

^ See "A Brief History of Computing" at AlanTuring.net.

^ , Schaeffer, Jonathan. One Jump Ahead:: Challenging Human Supremacy in Checkers, 1997, 2009, Springer, ISBN 978-0-387-76575-4. Chapter 6.

^ McCorduck, Pamela (2004), Machines Who Think (2nd ed.), Natick, Massachusetts: A. K. Peters, ISBN 1-5688-1205-1, pp. 480–483

^ First Queen at MobyGames

^ "Official Site". Kure Software Koubou. Retrieved 19 May 2011. (Translation)

^ Schwab, 2004, pp. 97–112

^ Schwab, 2004, p. 107

^ Emergent Intelligence in Games Archived 19 February 2011 at the Wayback Machine17 February 2011.

^ Good, Owen S. (5 August 2017). "Skyrim mod makes NPC interactions less scripted, more Sims-like". Polygon. Retrieved 16 April 2018.

^ Lara-Cabrera, R., Nogueira-Collazo, M., Cotta, C., & Fernández-Leiva, A. J. (2015). Game artificial intelligence: challenges for the scientific community.

^ Yannakakis, G. N. (2012, May). Game AI revisited. In Proceedings of the 9th conference on Computing Frontiers (pp. 285–292). ACM.

^ Hagelback, Johan, and Stefan J. Johansson. "Dealing with fog of war in a real-time strategy game environment." In Computational Intelligence and Games, 2008. CIG'08. IEEE Symposium On, pp. 55-62. IEEE, 2008.

^ a b Abd Algfoor, Zeyad; Sunar, Mohd Shahrizal; Kolivand, Hoshang (2015). "A Comprehensive Study on Pathfinding Techniques for Robotics and Video Games". International Journal of Computer Games Technology. 2015: 1–11. doi:10.1155/2015/736138.

^ Yap, Peter. "Grid-based path-finding." In Conference of the Canadian Society for Computational Studies of Intelligence, pp. 44-55. Springer, Berlin, Heidelberg, 2002.

^ Sturtevant, N. R. (June 2012). "Benchmarks for Grid-Based Pathfinding". IEEE Transactions on Computational Intelligence and AI in Games. 4 (2): 144–148. doi:10.1109/TCIAIG.2012.2197681. S2CID 2864753.

^ Goodwin, S. D., Menon, S., & Price, R. G. (2006). Pathfinding in open terrain. In Proceedings of International Academic Conference on the Future of Game Design and Technology.

^ Nareyek, A. (2004). AI in computer games. Queue, 1(10).

^ a b Cui, X., & Shi, H. (2011). A*-based pathfinding in modern computer games. International Journal of Computer Science and Network Security, 11(1), 125-130.

^ "Design Techniques and Ideals for Video Games". Byte Magazine. Vol. 7, no. 12. 1982. p. 100.

^ Lidén, L. (2003). Artificial stupidity: The art of intentional mistakes. AI game programming wisdom, 2, 41-48.

^ "Artificial Intelligence in Game Design". ai-depot.net. Retrieved 23 May 2024.

^ a b c d e Todd, Graham; Earle, Sam; Nasir, Muhammad Umair; Green, Michael Cerny; Togelius, Julian (2023). "Level Generation Through Large Language Models". Proceedings of the 18th International Conference on the Foundations of Digital Games. pp. 1–8. arXiv:2302.05817. doi:10.1145/3582437.3587211. ISBN 978-1-4503-9855-8.

^ R. van der Linden, R. Lopes and R. Bidarra, "Procedural Generation of Dungeons," in IEEE Transactions on Computational Intelligence and AI in Games, vol. 6, no. 1, March 2014, pp. 78-89. doi: 10.1109/TCIAIG.2013.2290371.

^ a b Seidel, S., et al. "Artificial Intelligence and Video Game Creation: A Framework for the New Logic of Autonomous Design." Journal of Digital Social Research, vol. 2, no. 3, Nov. 2020, pp. 126–157. doi:10.33621/jdsr.v2i3.46.

^ a b Liapis, Antonios (2021). "Artificial Intelligence for Designing Games". Artificial Intelligence and the Arts. Computational Synthesis and Creative Systems. pp. 277–310. doi:10.1007/978-3-030-59475-6_11. ISBN 978-3-030-59474-9.

^ Scirea, Marco, et al. "Affective Evolutionary Music Composition with MetaCompose." Genetic Programming and Evolvable Machines, vol. 18, no. 4, December 2017, pp. 433–465. doi:10.1007/s10710-017-9307-y.

^ Scirea, Marco, et al. "Evolving In-Game Mood-Expressive Music with MetaCompose." Proceedings of the Audio Mostly 2018 on Sound in Immersion and Emotion (AM '18), Association for Computing Machinery, 2018, Article 8, pp. 1-8. doi:10.1145/3243274.3243292.

^ Statt, Nick (9 March 2019). "HOW ARTIFICIAL INTELLIGENCE WILL REVOLUTIONIZE THE WAY VIDEO GAMES ARE DEVELOPED AND PLAYED". Retrieved 23 February 2020.

^ "AI creates new levels for Doom". BBC News. 8 May 2018. Retrieved 17 May 2018.

^ Vincent, James (22 May 2020). "Nvidia's AI recreates Pac-Man from scratch just by watching it being played". The Verge. Retrieved 28 May 2020.

^ Coleman, Terry Lee (July 1994). "He Ain't Heavy, He's My Sovereign". Computer Gaming World. pp. 110–111.

^ a b Scott, Bob (2002). "The Illusion of Intelligence". In Rabin, Steve (ed.). AI Game Programming Wisdom. Charles River Media. pp. 16–20.

^ a b Wilson, Johnny L.; Brown, Ken; Lombardi, Chris; Weksler, Mike; Coleman, Terry (July 1994). "The Designer's Dilemma: The Eighth Computer Game Developers Conference". Computer Gaming World. pp. 26–31.

^ Wilson, Johnny L. (February 1994). "Mea Culpas And Culpability". Editorial. Computer Gaming World. p. 8.

^ "The 7th International Computer Game Developers Conference". Computer Gaming World. July 1993. p. 34. Retrieved 12 July 2014.

^ a b "AiGameDev – Top 10 Most Influential AI Games". Archived from the original on 21 April 2013. Retrieved 22 September 2012.

^ Horti, Samuel (3 April 2017). "Why F.E.A.R.'s AI is still the best in first-person shooters". Rock, Paper, Shotgun. Retrieved 29 December 2020.

^ "Building the AI of F.E.A.R. with Goal Oriented Action Planning". gamasutra.com. 7 May 2020. Retrieved 29 December 2020.

^ "StarCraft II". StarCraft II. Retrieved 28 February 2017.

^ "Red Dead Redemption 2: The Current Pinnacle of AI in Video Games". Chris' Blog. 17 May 2019. Retrieved 4 September 2024.

^ Litchfield, Ted (4 February 2024). "This browser-based 'endless crafting game' starts you off with fire and water, but it quickly escalates to God, the Big Bang, and 'Yin-Yoda'". PCGamer. Retrieved 24 February 2024.

^ Bentley, James (1 November 2024). "AI-generated Minecraft unveiled, showcasing AI's unlimited ability to copy things but worse". PC Gamer. Retrieved 5 November 2024.

^ Cairns, Rebecca (23 October 2023). "'Video games are in for quite a trip': How generative AI could radically reshape gaming". CNN. Retrieved 9 January 2024.

^ Gerkin, Tom (11 January 2024). "Gaming voice actors blindsided by 'garbage' union AI deal". BBC News. Retrieved 12 January 2024.

^ [*Artificial Intelligence in Games*](https://link.springer.com/content/pdf/10.1007/978-3-319-42716-4.pdf). SpringerLink, 2016.

^ [*AI Techniques for Interactive Game Systems*](https://ieeexplore.ieee.org/abstract/document/6363215). IEEE, 2012.


Bibliography[edit]

Bogost, Ian (2017). "'Artificial Intelligence' Has Become Meaningless." [1]
Bourg; Seemann (2004). AI for Game Developers. O'Reilly & Associates. ISBN 0-596-00555-5.
Buckland (2002). AI Techniques for Game Programming. Muska & Lipman. ISBN 1-931841-08-X.
Buckland (2004). Programming Game AI By Example. Wordware Publishing. ISBN 1-55622-078-2.
Champandard (2003). AI Game Development. New Riders. ISBN 1-59273-004-3.
Eaton, Eric et al. (2015). "Who speaks for AI?" [2]
Funge (1999). AI for Animation and Games: A Cognitive Modeling Approach. A K Peters. ISBN 1-56881-103-9.
Funge (2004). Artificial Intelligence for Computer Games: An Introduction. A K Peters. ISBN 1-56881-208-6.
Kaplan, Jerry (2017). "AI's PR Problem." [3]
Millington (2005). Artificial Intelligence for Games Archived 4 September 2012 at the Wayback Machine. Morgan Kaufmann. ISBN 0-12-497782-0.
Schwab (2004). AI Game Engine Programming. Charles River Media. ISBN 1-58450-344-0.
Smed and Hakonen (2006). Algorithms and Networking for Computer Games. John Wiley & Sons. ISBN 0-470-01812-7.

External links[edit]
Special Interest Group on Artificial Intelligence @IGDA
AI Game Programming Wisdom on aiwisdom.com
Georgios N. Yannakakis and Julian Togelius
vteGame design elementsSubjects relating to game design, video game design, game studies, gameplay and game mechanicsConcepts
Balance
Game theory
Interactivity
Lusory attitude
Magic circle
Meaningful play
Rules
Action point
Continue
Difficulty level
Experience point
Game over
Health
Kingmaker scenario
Magic point
Permadeath
Point of no return
Probability of kill
Score
Six degrees of freedom
Technology tree
Unwinnable
Modes
Attract mode
Bonus stage
CPU vs. CPU
Capture the flag
Cooperative gameplay
board
video
Deathmatch
Game replay
Hotseat
King of the hill
Last man standing
Multiplayer
New Game Plus
Nonlinear gameplay
Player versus environment
Player versus player
Real-time vs. turn-based gameplay
Single-player
Sudden death
Time attack
Time trial
Turn-based game
Systems
Character creation
Dialogue tree
Dynamic game difficulty balancing
Gold sink
Instance dungeon
Leveled gameplay
Monster infighting
Minigame
Puzzle
Quicksaving
Quick time event
Random dungeon
Random encounter
Role-playing battle systems
Saved game
Spawning
Spawn point
Virtual economy
Activities
Combo
Double jump
Finishing move
Frag
Grinding
Looting
Macromanagement
Micromanagement
Quest
Raid
Special attack
Syntax guessing
Time sink
Twitch gameplay
Wall jump
Behavior
Actions per minute
Button mashing
Bunny hopping
Camping
Cheating
Circle strafing
Crowd control
Griefer
Kill stealing
Kiting
Maphack
Min-maxing
Ogging
Online creation
Powergaming
Rocket jumping
Respecing
Rush
Sequence breaking
Spam
Speedrun
Power spike
Spray and pray
Strafe-jumping
Straferunning
Tank
Tap
Team killing
Tool-assisted speedrun
Trickjump
Turtling
Twinking
Wallhacking
Items
1-up
Hitscan
Nuke
Power-up
Effects
Buff
Cooldown
Critical hit
Damage over time
Damage per second
Splash damage
Status effect
Feedback
Automap
Cutscene
Fog of war
Ghost
Gib
HUD
Mini-map
Overworld
Characters
Artificial Intelligence
Avatar
Boss
Bot
Mob
Non-player character
Paper doll
Player character
Super move
Win quote
Environment
Invisible wall
Level
Line of sight
Open world
Persistent world





Retrieved from "https://en.wikipedia.org/w/index.php?title=Artificial_intelligence_in_video_games&oldid=1272579231"
Categories: Game artificial intelligenceVideo game developmentHidden categories: Webarchive template wayback linksArticles with short descriptionShort description is different from WikidataUse dmy dates from January 2023All articles with specifically marked weasel-worded phrasesArticles with specifically marked weasel-worded phrases from July 2017All articles with unsourced statementsArticles with unsourced statements from May 2010Articles with specifically marked weasel-worded phrases from December 2024Articles with unsourced statements from September 2008Articles with unsourced statements from August 2011Articles with unsourced statements from April 2018Articles with unsourced statements from September 2010Articles with specifically marked weasel-worded phrases from November 2024All articles with vague or ambiguous timeVague or ambiguous time from November 2024Articles with unsourced statements from August 2013






 This page was last edited on 29 January 2025, at 10:14 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Artificial intelligence in video games




























22 languages


Add topic














